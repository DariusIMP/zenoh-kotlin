name: Publish JVM

on:
  release:
    types: [published]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build_jni_for_windows:
    name: Build Zenoh JNI for Windows Targets
    runs-on: windows-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          override: true
          components: rustfmt, clippy

      - name: Setup Rust toolchains
        run: |
          rustup target add x86_64-pc-windows-msvc

      - name: Build X86_64
        run: |
          cd zenoh-jni
          cargo build --release --target x86_64-pc-windows-msvc

      - uses: actions/upload-artifact@v3
        with:
          name: x86_64-pc-windows-msvc/libzenoh_jni.dll
          path: zenoh-jni/target/x86_64-pc-windows-msvc/release


  build_jni_for_unix:
    name: Build Zenoh JNI for Windows Targets
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          override: true
          components: rustfmt, clippy

      - name: Setup Rust toolchains
        run: |
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      - name: Build Aarch64
        run: |
          cd zenoh-jni
          cargo build --release --target aarch64-unknown-linux-gnu

      - uses: actions/upload-artifact@v3
        with:
          name: aarch64-unknown-linux-gnu/libzenoh_jni.so
          path: zenoh-jni/target/aarch64-unknown-linux-gnu/release

      - name: Build X86_64
        run: |
          cd zenoh-jni
          cargo build --release --target x86_64-unknown-linux-gnu

      - uses: actions/upload-artifact@v3
        with:
          name: x86_64-unknown-linux-gnu/libzenoh_jni.dylib
          path: zenoh-jni/target/x86_64-unknown-linux-gnu/release


  build_jni_for_mac:
    name: Build Zenoh JNI for Windows Targets
    runs-on: macOS-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          override: true
          components: rustfmt, clippy

      - name: Setup Rust toolchains
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Build Aarch64
        run: |
          cd zenoh-jni
          cargo build --release --target aarch64-apple-darwin

      - uses: actions/upload-artifact@v3
        with:
          name: aarch64-apple-darwin/libzenoh_jni.dylib
          path: zenoh-jni/target/aarch64-apple-darwin/release

      - name: Build X86_64
        run: |
          cd zenoh-jni
          cargo build --release --target x86_64-apple-darwin

      - uses: actions/upload-artifact@v3
        with:
          name: x86_64-apple-darwin/libzenoh_jni.dylib
          path: zenoh-jni/target/x86_64-apple-darwin/release

#
#  publish_jvm_package:
#    name: Publish JVM Package to Github Packages
#    runs-on: ubuntu-latest
#    needs: [build_jni_for_mac, build_jni_for_windows, build_jni_for_unix]
#    permissions:
#      contents: read
#      packages: write
#    steps:
#      - uses: actions/checkout@v3
#
#      - uses: actions/setup-java@v3
#        with:
#          distribution: temurin
#          java-version: 11
#
#      - uses: nttld/setup-ndk@v1
#        id: setup-ndk
#        with:
#          ndk-version: r26
#          add-to-path: false
#          link-to-sdk: true
#
#      - name: Install Rust
#        uses: actions-rs/toolchain@v1
#        with:
#          override: true
#          components: rustfmt, clippy
#
#      - name: Gradle Wrapper
#        run: |
#          gradle wrapper
#
#      - name: Validate Gradle wrapper
#        uses: gradle/wrapper-validation-action@v1
#
#      - name: Gradle Publish JVM Package
#        uses: gradle/gradle-build-action@v2
#        with:
#          arguments: publishJvmPublicationToGithubPackagesRepository
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
